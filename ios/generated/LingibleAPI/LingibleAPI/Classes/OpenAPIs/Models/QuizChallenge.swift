//
// QuizChallenge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuizChallenge: Codable, JSONEncodable, Hashable {

    /** Unique challenge identifier */
    public var challengeId: String
    public var challengeType: ChallengeType
    public var difficulty: QuizDifficulty
    /** Time limit for completing the quiz */
    public var timeLimitSeconds: Int
    /** List of quiz questions */
    public var questions: [QuizQuestion]
    public var scoring: QuizChallengeScoring
    /** When the challenge expires */
    public var expiresAt: Date

    public init(challengeId: String, challengeType: ChallengeType, difficulty: QuizDifficulty, timeLimitSeconds: Int, questions: [QuizQuestion], scoring: QuizChallengeScoring, expiresAt: Date) {
        self.challengeId = challengeId
        self.challengeType = challengeType
        self.difficulty = difficulty
        self.timeLimitSeconds = timeLimitSeconds
        self.questions = questions
        self.scoring = scoring
        self.expiresAt = expiresAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case challengeId = "challenge_id"
        case challengeType = "challenge_type"
        case difficulty
        case timeLimitSeconds = "time_limit_seconds"
        case questions
        case scoring
        case expiresAt = "expires_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(challengeId, forKey: .challengeId)
        try container.encode(challengeType, forKey: .challengeType)
        try container.encode(difficulty, forKey: .difficulty)
        try container.encode(timeLimitSeconds, forKey: .timeLimitSeconds)
        try container.encode(questions, forKey: .questions)
        try container.encode(scoring, forKey: .scoring)
        try container.encode(expiresAt, forKey: .expiresAt)
    }
}
