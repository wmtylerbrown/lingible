//
// QuizHistory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuizHistory: Codable, JSONEncodable, Hashable {

    /** User ID */
    public var userId: String
    /** Total quizzes taken */
    public var totalQuizzes: Int
    /** Average score across all quizzes */
    public var averageScore: Float
    /** Best score achieved */
    public var bestScore: Int
    /** Total correct answers */
    public var totalCorrect: Int
    /** Total questions answered */
    public var totalQuestions: Int
    /** Overall accuracy percentage */
    public var accuracyRate: Float
    /** Number of quizzes taken today */
    public var quizzesToday: Int
    /** Whether user can take another quiz */
    public var canTakeQuiz: Bool
    /** Reason if user cannot take quiz (e.g., 'Daily limit reached') */
    public var reason: String?

    public init(userId: String, totalQuizzes: Int, averageScore: Float, bestScore: Int, totalCorrect: Int, totalQuestions: Int, accuracyRate: Float, quizzesToday: Int, canTakeQuiz: Bool, reason: String? = nil) {
        self.userId = userId
        self.totalQuizzes = totalQuizzes
        self.averageScore = averageScore
        self.bestScore = bestScore
        self.totalCorrect = totalCorrect
        self.totalQuestions = totalQuestions
        self.accuracyRate = accuracyRate
        self.quizzesToday = quizzesToday
        self.canTakeQuiz = canTakeQuiz
        self.reason = reason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case totalQuizzes = "total_quizzes"
        case averageScore = "average_score"
        case bestScore = "best_score"
        case totalCorrect = "total_correct"
        case totalQuestions = "total_questions"
        case accuracyRate = "accuracy_rate"
        case quizzesToday = "quizzes_today"
        case canTakeQuiz = "can_take_quiz"
        case reason
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userId, forKey: .userId)
        try container.encode(totalQuizzes, forKey: .totalQuizzes)
        try container.encode(averageScore, forKey: .averageScore)
        try container.encode(bestScore, forKey: .bestScore)
        try container.encode(totalCorrect, forKey: .totalCorrect)
        try container.encode(totalQuestions, forKey: .totalQuestions)
        try container.encode(accuracyRate, forKey: .accuracyRate)
        try container.encode(quizzesToday, forKey: .quizzesToday)
        try container.encode(canTakeQuiz, forKey: .canTakeQuiz)
        try container.encodeIfPresent(reason, forKey: .reason)
    }
}
