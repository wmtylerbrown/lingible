//
// QuizQuestion.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QuizQuestion: Codable, JSONEncodable, Hashable {

    /** Unique question identifier */
    public var questionId: String
    /** The slang term being tested */
    public var slangTerm: String
    /** The question text */
    public var questionText: String
    /** Available answer options */
    public var options: [QuizOption]
    /** Example usage of the slang term */
    public var contextHint: String?
    /** Explanation of the term (only included in results) */
    public var explanation: String?

    public init(questionId: String, slangTerm: String, questionText: String, options: [QuizOption], contextHint: String? = nil, explanation: String? = nil) {
        self.questionId = questionId
        self.slangTerm = slangTerm
        self.questionText = questionText
        self.options = options
        self.contextHint = contextHint
        self.explanation = explanation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case questionId = "question_id"
        case slangTerm = "slang_term"
        case questionText = "question_text"
        case options
        case contextHint = "context_hint"
        case explanation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(questionId, forKey: .questionId)
        try container.encode(slangTerm, forKey: .slangTerm)
        try container.encode(questionText, forKey: .questionText)
        try container.encode(options, forKey: .options)
        try container.encodeIfPresent(contextHint, forKey: .contextHint)
        try container.encodeIfPresent(explanation, forKey: .explanation)
    }
}
