//
// ReceiptValidationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ReceiptValidationResponse: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case valid = "valid"
        case invalid = "invalid"
        case expired = "expired"
        case alreadyUsed = "already_used"
        case environmentMismatch = "environment_mismatch"
        case retryableError = "retryable_error"
    }
    public enum Environment: String, Codable, CaseIterable {
        case sandbox = "sandbox"
        case production = "production"
    }
    /** Whether receipt is valid */
    public var isValid: Bool?
    /** Validation status */
    public var status: Status?
    /** Transaction ID */
    public var transactionId: String?
    /** Product ID from receipt */
    public var productId: String?
    /** Purchase date */
    public var purchaseDate: Date?
    /** Expiration date */
    public var expirationDate: Date?
    /** Environment */
    public var environment: Environment?
    /** Error message if validation failed */
    public var errorMessage: String?
    /** Seconds to wait before retry */
    public var retryAfter: Int?

    public init(isValid: Bool? = nil, status: Status? = nil, transactionId: String? = nil, productId: String? = nil, purchaseDate: Date? = nil, expirationDate: Date? = nil, environment: Environment? = nil, errorMessage: String? = nil, retryAfter: Int? = nil) {
        self.isValid = isValid
        self.status = status
        self.transactionId = transactionId
        self.productId = productId
        self.purchaseDate = purchaseDate
        self.expirationDate = expirationDate
        self.environment = environment
        self.errorMessage = errorMessage
        self.retryAfter = retryAfter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isValid = "is_valid"
        case status
        case transactionId = "transaction_id"
        case productId = "product_id"
        case purchaseDate = "purchase_date"
        case expirationDate = "expiration_date"
        case environment
        case errorMessage = "error_message"
        case retryAfter = "retry_after"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isValid, forKey: .isValid)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(purchaseDate, forKey: .purchaseDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(environment, forKey: .environment)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(retryAfter, forKey: .retryAfter)
    }
}
