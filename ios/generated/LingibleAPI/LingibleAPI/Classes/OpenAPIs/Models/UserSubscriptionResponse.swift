//
// UserSubscriptionResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserSubscriptionResponse: Codable, JSONEncodable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case apple = "apple"
        case google = "google"
    }
    public enum Status: String, Codable, CaseIterable {
        case active = "active"
        case expired = "expired"
        case cancelled = "cancelled"
    }
    /** Subscription provider */
    public var provider: Provider?
    /** Provider transaction ID */
    public var transactionId: String?
    /** Subscription status */
    public var status: Status?
    /** Subscription start date */
    public var startDate: Date?
    /** Subscription end date */
    public var endDate: Date?
    /** Record creation date */
    public var createdAt: Date?

    public init(provider: Provider? = nil, transactionId: String? = nil, status: Status? = nil, startDate: Date? = nil, endDate: Date? = nil, createdAt: Date? = nil) {
        self.provider = provider
        self.transactionId = transactionId
        self.status = status
        self.startDate = startDate
        self.endDate = endDate
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case transactionId = "transaction_id"
        case status
        case startDate = "start_date"
        case endDate = "end_date"
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

