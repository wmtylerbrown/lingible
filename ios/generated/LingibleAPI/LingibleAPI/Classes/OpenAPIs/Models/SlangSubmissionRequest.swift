//
// SlangSubmissionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SlangSubmissionRequest: Codable, JSONEncodable, Hashable {

    public enum Context: String, Codable, CaseIterable {
        case translationFailure = "translation_failure"
        case manual = "manual"
    }
    public static let slangTermRule = StringRule(minLength: 1, maxLength: 100, pattern: nil)
    public static let meaningRule = StringRule(minLength: 1, maxLength: 500, pattern: nil)
    public static let exampleUsageRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    /** The slang term to submit */
    public var slangTerm: String
    /** What the slang term means */
    public var meaning: String
    /** Optional example of how the term is used */
    public var exampleUsage: String?
    /** How the submission was initiated */
    public var context: Context? = .manual
    /** Original translation ID if submitted from a failed translation */
    public var translationId: String?

    public init(slangTerm: String, meaning: String, exampleUsage: String? = nil, context: Context? = .manual, translationId: String? = nil) {
        self.slangTerm = slangTerm
        self.meaning = meaning
        self.exampleUsage = exampleUsage
        self.context = context
        self.translationId = translationId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case slangTerm = "slang_term"
        case meaning
        case exampleUsage = "example_usage"
        case context
        case translationId = "translation_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(slangTerm, forKey: .slangTerm)
        try container.encode(meaning, forKey: .meaning)
        try container.encodeIfPresent(exampleUsage, forKey: .exampleUsage)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(translationId, forKey: .translationId)
    }
}
