//
// UserProfileResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserProfileResponse: Codable, JSONEncodable, Hashable {

    public enum Tier: String, Codable, CaseIterable {
        case free = "free"
        case premium = "premium"
    }
    public enum Status: String, Codable, CaseIterable {
        case active = "active"
        case cancelled = "cancelled"
        case suspended = "suspended"
    }
    public var userId: String?
    public var email: String?
    /** Cognito username */
    public var username: String?
    public var tier: Tier?
    public var status: Status?
    /** Account creation date */
    public var createdAt: Date?
    /** Last update date */
    public var updatedAt: Date?

    public init(userId: String? = nil, email: String? = nil, username: String? = nil, tier: Tier? = nil, status: Status? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.userId = userId
        self.email = email
        self.username = username
        self.tier = tier
        self.status = status
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case email
        case username
        case tier
        case status
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(tier, forKey: .tier)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

