//
// TranslationHistoryItemResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TranslationHistoryItemResponse: Codable, JSONEncodable, Hashable {

    public enum Direction: String, Codable, CaseIterable {
        case englishToGenz = "english_to_genz"
        case genzToEnglish = "genz_to_english"
    }
    public static let confidenceScoreRule = NumericRule<Float>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    /** Unique translation ID */
    public var translationId: String?
    /** User ID */
    public var userId: String?
    public var originalText: String?
    public var translatedText: String?
    /** Translation direction used */
    public var direction: Direction?
    public var confidenceScore: Float?
    public var createdAt: Date?
    /** AI model used for translation */
    public var modelUsed: String?

    public init(translationId: String? = nil, userId: String? = nil, originalText: String? = nil, translatedText: String? = nil, direction: Direction? = nil, confidenceScore: Float? = nil, createdAt: Date? = nil, modelUsed: String? = nil) {
        self.translationId = translationId
        self.userId = userId
        self.originalText = originalText
        self.translatedText = translatedText
        self.direction = direction
        self.confidenceScore = confidenceScore
        self.createdAt = createdAt
        self.modelUsed = modelUsed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case translationId = "translation_id"
        case userId = "user_id"
        case originalText = "original_text"
        case translatedText = "translated_text"
        case direction
        case confidenceScore = "confidence_score"
        case createdAt = "created_at"
        case modelUsed = "model_used"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(translationId, forKey: .translationId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(originalText, forKey: .originalText)
        try container.encodeIfPresent(translatedText, forKey: .translatedText)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(confidenceScore, forKey: .confidenceScore)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(modelUsed, forKey: .modelUsed)
    }
}
