//
// TrendingTermResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrendingTermResponse: Codable, JSONEncodable, Hashable {

    public enum Category: String, Codable, CaseIterable {
        case slang = "slang"
        case meme = "meme"
        case expression = "expression"
        case hashtag = "hashtag"
        case phrase = "phrase"
    }
    public static let popularityScoreRule = NumericRule<Double>(minimum: 0.0, exclusiveMinimum: false, maximum: 100.0, exclusiveMaximum: false, multipleOf: nil)
    public static let searchCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let translationCountRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The slang term or phrase */
    public var term: String
    /** Definition or explanation of the term */
    public var definition: String?
    /** Category of the trending term */
    public var category: Category?
    /** Popularity score (0-100) */
    public var popularityScore: Double?
    /** Number of times searched */
    public var searchCount: Int?
    /** Number of times translated */
    public var translationCount: Int?
    /** When this term was first detected */
    public var firstSeen: Date?
    /** Last time metrics were updated */
    public var lastUpdated: Date
    /** Whether this term is currently trending */
    public var isActive: Bool?
    /** Example of how the term is used */
    public var exampleUsage: String?
    /** Origin or source of the term */
    public var origin: String?
    /** Related slang terms */
    public var relatedTerms: [String]?

    public init(term: String, definition: String? = nil, category: Category? = nil, popularityScore: Double? = nil, searchCount: Int? = nil, translationCount: Int? = nil, firstSeen: Date? = nil, lastUpdated: Date, isActive: Bool? = nil, exampleUsage: String? = nil, origin: String? = nil, relatedTerms: [String]? = nil) {
        self.term = term
        self.definition = definition
        self.category = category
        self.popularityScore = popularityScore
        self.searchCount = searchCount
        self.translationCount = translationCount
        self.firstSeen = firstSeen
        self.lastUpdated = lastUpdated
        self.isActive = isActive
        self.exampleUsage = exampleUsage
        self.origin = origin
        self.relatedTerms = relatedTerms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case term
        case definition
        case category
        case popularityScore = "popularity_score"
        case searchCount = "search_count"
        case translationCount = "translation_count"
        case firstSeen = "first_seen"
        case lastUpdated = "last_updated"
        case isActive = "is_active"
        case exampleUsage = "example_usage"
        case origin
        case relatedTerms = "related_terms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(term, forKey: .term)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(popularityScore, forKey: .popularityScore)
        try container.encodeIfPresent(searchCount, forKey: .searchCount)
        try container.encodeIfPresent(translationCount, forKey: .translationCount)
        try container.encodeIfPresent(firstSeen, forKey: .firstSeen)
        try container.encode(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(exampleUsage, forKey: .exampleUsage)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(relatedTerms, forKey: .relatedTerms)
    }
}
