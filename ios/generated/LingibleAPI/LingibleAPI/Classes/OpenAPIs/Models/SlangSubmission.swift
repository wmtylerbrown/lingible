//
// SlangSubmission.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SlangSubmission: Codable, JSONEncodable, Hashable {

    public enum Context: String, Codable, CaseIterable {
        case translationFailure = "translation_failure"
        case manual = "manual"
    }
    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case approved = "approved"
        case rejected = "rejected"
        case draft = "draft"
    }
    public enum LlmValidationStatus: String, Codable, CaseIterable {
        case pendingValidation = "pending_validation"
        case validated = "validated"
        case rejected = "rejected"
        case autoApproved = "auto_approved"
        case adminApproved = "admin_approved"
    }
    public enum ApprovalType: String, Codable, CaseIterable {
        case llmAuto = "llm_auto"
        case adminManual = "admin_manual"
        case communityVote = "community_vote"
    }
    public static let llmConfidenceScoreRule = NumericRule<Float>(minimum: 0.0, exclusiveMinimum: false, maximum: 1.0, exclusiveMaximum: false, multipleOf: nil)
    public static let upvotesRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** Unique submission ID */
    public var submissionId: String
    /** User who submitted the term */
    public var userId: String
    /** The slang term */
    public var slangTerm: String
    /** What the term means */
    public var meaning: String
    /** Optional example usage */
    public var exampleUsage: String?
    /** How the submission was initiated */
    public var context: Context
    /** Translation ID if from failed translation */
    public var originalTranslationId: String?
    /** Overall approval status */
    public var status: Status
    /** LLM validation status */
    public var llmValidationStatus: LlmValidationStatus
    /** Confidence score from LLM validation */
    public var llmConfidenceScore: Float?
    /** Type of approval if approved */
    public var approvalType: ApprovalType?
    /** Number of community upvotes */
    public var upvotes: Int
    /** Submission timestamp */
    public var createdAt: Date
    /** Review timestamp */
    public var reviewedAt: Date?
    /** Reviewer user ID */
    public var reviewedBy: String?
    /** Admin who approved (if manual) */
    public var approvedBy: String?

    public init(submissionId: String, userId: String, slangTerm: String, meaning: String, exampleUsage: String? = nil, context: Context, originalTranslationId: String? = nil, status: Status, llmValidationStatus: LlmValidationStatus, llmConfidenceScore: Float? = nil, approvalType: ApprovalType? = nil, upvotes: Int, createdAt: Date, reviewedAt: Date? = nil, reviewedBy: String? = nil, approvedBy: String? = nil) {
        self.submissionId = submissionId
        self.userId = userId
        self.slangTerm = slangTerm
        self.meaning = meaning
        self.exampleUsage = exampleUsage
        self.context = context
        self.originalTranslationId = originalTranslationId
        self.status = status
        self.llmValidationStatus = llmValidationStatus
        self.llmConfidenceScore = llmConfidenceScore
        self.approvalType = approvalType
        self.upvotes = upvotes
        self.createdAt = createdAt
        self.reviewedAt = reviewedAt
        self.reviewedBy = reviewedBy
        self.approvedBy = approvedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case submissionId = "submission_id"
        case userId = "user_id"
        case slangTerm = "slang_term"
        case meaning
        case exampleUsage = "example_usage"
        case context
        case originalTranslationId = "original_translation_id"
        case status
        case llmValidationStatus = "llm_validation_status"
        case llmConfidenceScore = "llm_confidence_score"
        case approvalType = "approval_type"
        case upvotes
        case createdAt = "created_at"
        case reviewedAt = "reviewed_at"
        case reviewedBy = "reviewed_by"
        case approvedBy = "approved_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(submissionId, forKey: .submissionId)
        try container.encode(userId, forKey: .userId)
        try container.encode(slangTerm, forKey: .slangTerm)
        try container.encode(meaning, forKey: .meaning)
        try container.encodeIfPresent(exampleUsage, forKey: .exampleUsage)
        try container.encode(context, forKey: .context)
        try container.encodeIfPresent(originalTranslationId, forKey: .originalTranslationId)
        try container.encode(status, forKey: .status)
        try container.encode(llmValidationStatus, forKey: .llmValidationStatus)
        try container.encodeIfPresent(llmConfidenceScore, forKey: .llmConfidenceScore)
        try container.encodeIfPresent(approvalType, forKey: .approvalType)
        try container.encode(upvotes, forKey: .upvotes)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(reviewedAt, forKey: .reviewedAt)
        try container.encodeIfPresent(reviewedBy, forKey: .reviewedBy)
        try container.encodeIfPresent(approvedBy, forKey: .approvedBy)
    }
}
