//
// TranslationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TranslationAPI {

    /**
     Translate teen slang

     - parameter translationRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func translatePost(translationRequest: TranslationRequest, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: TranslationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return translatePostWithRequestBuilder(translationRequest: translationRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Translate teen slang
     - POST /translate
     - Translate GenZ/teen slang to formal English and vice versa using AWS Bedrock AI
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter translationRequest: (body)
     - returns: RequestBuilder<TranslationResponse>
     */
    open class func translatePostWithRequestBuilder(translationRequest: TranslationRequest) -> RequestBuilder<TranslationResponse> {
        let localVariablePath = "/translate"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: translationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TranslationResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Clear all slang translations

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func translationsDeleteAllDelete(apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return translationsDeleteAllDeleteWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Clear all slang translations
     - DELETE /translations/delete-all
     - Delete all slang translations for the user (premium feature)
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<SuccessResponse>
     */
    open class func translationsDeleteAllDeleteWithRequestBuilder() -> RequestBuilder<SuccessResponse> {
        let localVariablePath = "/translations/delete-all"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get slang translation history

     - parameter limit: (query) Number of translations to return (optional, default to 20)
     - parameter offset: (query) Number of translations to skip (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func translationsGet(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: TranslationHistoryServiceResult?, _ error: Error?) -> Void)) -> RequestTask {
        return translationsGetWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get slang translation history
     - GET /translations
     - Get user's slang translation history (premium feature)
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter limit: (query) Number of translations to return (optional, default to 20)
     - parameter offset: (query) Number of translations to skip (optional, default to 0)
     - returns: RequestBuilder<TranslationHistoryServiceResult>
     */
    open class func translationsGetWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<TranslationHistoryServiceResult> {
        let localVariablePath = "/translations"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TranslationHistoryServiceResult>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete specific slang translation

     - parameter translationId: (path) Translation ID
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func translationsTranslationIdDelete(translationId: String, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return translationsTranslationIdDeleteWithRequestBuilder(translationId: translationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete specific slang translation
     - DELETE /translations/{translationId}
     - Delete a specific slang translation by ID
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter translationId: (path) Translation ID
     - returns: RequestBuilder<SuccessResponse>
     */
    open class func translationsTranslationIdDeleteWithRequestBuilder(translationId: String) -> RequestBuilder<SuccessResponse> {
        var localVariablePath = "/translations/{translationId}"
        let translationIdPreEscape = "\(APIHelper.mapValueToPathItem(translationId))"
        let translationIdPostEscape = translationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{translationId}", with: translationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
