//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserAPI {

    /**
     Get user profile
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userProfileGet(apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfileResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userProfileGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile
     - GET /user/profile
     - Get the current user's profile information
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<UserProfileResponse> 
     */
    open class func userProfileGetWithRequestBuilder() -> RequestBuilder<UserProfileResponse> {
        let localVariablePath = "/user/profile"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfileResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upgrade user subscription
     
     - parameter upgradeRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUpgradePost(upgradeRequest: UpgradeRequest, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UpgradeResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUpgradePostWithRequestBuilder(upgradeRequest: upgradeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upgrade user subscription
     - POST /user/upgrade
     - Upgrade user to premium subscription
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter upgradeRequest: (body)  
     - returns: RequestBuilder<UpgradeResponse> 
     */
    open class func userUpgradePostWithRequestBuilder(upgradeRequest: UpgradeRequest) -> RequestBuilder<UpgradeResponse> {
        let localVariablePath = "/user/upgrade"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: upgradeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpgradeResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get usage statistics
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUsageGet(apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: UsageResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUsageGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get usage statistics
     - GET /user/usage
     - Get the current user's usage statistics
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<UsageResponse> 
     */
    open class func userUsageGetWithRequestBuilder() -> RequestBuilder<UsageResponse> {
        let localVariablePath = "/user/usage"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsageResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
