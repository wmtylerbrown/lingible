//
// AdminAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AdminAPI {

    /**
     Admin approve slang submission

     - parameter submissionId: (path) The submission ID to approve
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func slangAdminApproveSubmissionIdPost(submissionId: String, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: AdminApprovalResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return slangAdminApproveSubmissionIdPostWithRequestBuilder(submissionId: submissionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Admin approve slang submission
     - POST /slang/admin/approve/{submission_id}
     - Manually approve a slang submission (admin only)
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter submissionId: (path) The submission ID to approve
     - returns: RequestBuilder<AdminApprovalResponse>
     */
    open class func slangAdminApproveSubmissionIdPostWithRequestBuilder(submissionId: String) -> RequestBuilder<AdminApprovalResponse> {
        var localVariablePath = "/slang/admin/approve/{submission_id}"
        let submissionIdPreEscape = "\(APIHelper.mapValueToPathItem(submissionId))"
        let submissionIdPostEscape = submissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{submission_id}", with: submissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdminApprovalResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Admin reject slang submission

     - parameter submissionId: (path) The submission ID to reject
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func slangAdminRejectSubmissionIdPost(submissionId: String, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: AdminApprovalResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return slangAdminRejectSubmissionIdPostWithRequestBuilder(submissionId: submissionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Admin reject slang submission
     - POST /slang/admin/reject/{submission_id}
     - Manually reject a slang submission (admin only)
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter submissionId: (path) The submission ID to reject
     - returns: RequestBuilder<AdminApprovalResponse>
     */
    open class func slangAdminRejectSubmissionIdPostWithRequestBuilder(submissionId: String) -> RequestBuilder<AdminApprovalResponse> {
        var localVariablePath = "/slang/admin/reject/{submission_id}"
        let submissionIdPreEscape = "\(APIHelper.mapValueToPathItem(submissionId))"
        let submissionIdPostEscape = submissionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{submission_id}", with: submissionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdminApprovalResponse>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
