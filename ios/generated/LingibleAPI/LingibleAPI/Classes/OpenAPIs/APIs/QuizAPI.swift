//
// QuizAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuizAPI {

    /**
     * enum for parameter difficulty
     */
    public enum Difficulty_quizChallengeGet: String, CaseIterable {
        case beginner = "beginner"
        case intermediate = "intermediate"
        case advanced = "advanced"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_quizChallengeGet: String, CaseIterable {
        case multipleChoice = "multiple_choice"
    }

    /**
     Get a quiz challenge

     - parameter difficulty: (query) Quiz difficulty level (optional, default to .beginner)
     - parameter type: (query) Type of quiz challenge (optional, default to .multipleChoice)
     - parameter count: (query) Number of questions in the quiz (1-50) (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func quizChallengeGet(difficulty: Difficulty_quizChallengeGet? = nil, type: ModelType_quizChallengeGet? = nil, count: Int? = nil, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: QuizChallenge?, _ error: Error?) -> Void)) -> RequestTask {
        return quizChallengeGetWithRequestBuilder(difficulty: difficulty, type: type, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a quiz challenge
     - GET /quiz/challenge
     - Generate a new quiz challenge for the authenticated user.  **Free Tier Features:** - Limited to 3 quizzes per day - Basic difficulty levels - Standard question count (10 questions)  **Premium Tier Features:** - Unlimited quizzes per day - All difficulty levels (beginner, intermediate, advanced) - Customizable question count (1-50 questions) - Multiple challenge types
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter difficulty: (query) Quiz difficulty level (optional, default to .beginner)
     - parameter type: (query) Type of quiz challenge (optional, default to .multipleChoice)
     - parameter count: (query) Number of questions in the quiz (1-50) (optional, default to 10)
     - returns: RequestBuilder<QuizChallenge>
     */
    open class func quizChallengeGetWithRequestBuilder(difficulty: Difficulty_quizChallengeGet? = nil, type: ModelType_quizChallengeGet? = nil, count: Int? = nil) -> RequestBuilder<QuizChallenge> {
        let localVariablePath = "/quiz/challenge"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "difficulty": (wrappedValue: difficulty?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuizChallenge>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get quiz history and eligibility

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func quizHistoryGet(apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: QuizHistory?, _ error: Error?) -> Void)) -> RequestTask {
        return quizHistoryGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get quiz history and eligibility
     - GET /quiz/history
     - Get the user's quiz history, statistics, and eligibility status.  Returns: - Total quizzes taken - Average score and best score - Accuracy rate - Quizzes taken today - Whether user can take another quiz - Reason if quiz is not available
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<QuizHistory>
     */
    open class func quizHistoryGetWithRequestBuilder() -> RequestBuilder<QuizHistory> {
        let localVariablePath = "/quiz/history"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuizHistory>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Submit quiz answers

     - parameter quizSubmissionRequest: (body)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func quizSubmitPost(quizSubmissionRequest: QuizSubmissionRequest, apiResponseQueue: DispatchQueue = LingibleAPIAPI.apiResponseQueue, completion: @escaping ((_ data: QuizResult?, _ error: Error?) -> Void)) -> RequestTask {
        return quizSubmitPostWithRequestBuilder(quizSubmissionRequest: quizSubmissionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit quiz answers
     - POST /quiz/submit
     - Submit answers for a quiz challenge and receive results.  The challenge must be valid and not expired. Results include: - Score and accuracy - Per-question feedback - Explanations for each term - Shareable result text
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter quizSubmissionRequest: (body)
     - returns: RequestBuilder<QuizResult>
     */
    open class func quizSubmitPostWithRequestBuilder(quizSubmissionRequest: QuizSubmissionRequest) -> RequestBuilder<QuizResult> {
        let localVariablePath = "/quiz/submit"
        let localVariableURLString = LingibleAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quizSubmissionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuizResult>.Type = LingibleAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
