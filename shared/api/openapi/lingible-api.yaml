openapi: 3.0.3
info:
  title: Lingible API
  description: API for translating GenZ/teen slang to English and vice versa using AWS Bedrock
  version: 1.0.0
  contact:
    name: Lingible Team
    url: https://lingible.com
  license:
    name: Proprietary
    url: https://lingible.com/license

servers:
  - url: https://api.dev.lingible.com
    description: Development server
  - url: https://api.lingible.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translate:
    post:
      summary: Translate teen slang
      description: Translate GenZ/teen slang to formal English and vice versa using AWS Bedrock AI
      tags:
        - Translation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslationRequest'
      responses:
        '200':
          description: Translation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translations:
    get:
      summary: Get slang translation history
      description: Get user's slang translation history (premium feature)
      tags:
        - Translation
      parameters:
        - name: limit
          in: query
          description: Number of translations to return
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of translations to skip
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Translation history retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationHistoryServiceResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Premium feature required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translations/delete-all:
    delete:
      summary: Clear all slang translations
      description: Delete all slang translations for the user (premium feature)
      tags:
        - Translation
      responses:
        '200':
          description: All translations deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Premium feature required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translations/{translationId}:
    delete:
      summary: Delete specific slang translation
      description: Delete a specific slang translation by ID
      tags:
        - Translation
      parameters:
        - name: translationId
          in: path
          required: true
          description: Translation ID
          schema:
            type: string
      responses:
        '200':
          description: Translation deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Slang translation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /slang/submit:
    post:
      summary: Submit new slang term
      description: Submit a new slang term for review (premium feature)
      tags:
        - Slang
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlangSubmissionRequest'
      responses:
        '200':
          description: Slang submission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlangSubmissionResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Premium feature required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /slang/pending:
    get:
      summary: Get pending slang submissions
      description: Get slang submissions available for community voting (VALIDATED status)
      tags:
        - Slang
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          description: Maximum number of submissions to return
      responses:
        '200':
          description: List of pending submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingSubmissionsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /slang/upvote/{submission_id}:
    post:
      summary: Upvote a slang submission
      description: Add an upvote to a pending slang submission (cannot upvote own submissions)
      tags:
        - Slang
      parameters:
        - in: path
          name: submission_id
          required: true
          schema:
            type: string
          description: The submission ID to upvote
      responses:
        '200':
          description: Upvote added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpvoteResponse'
        '400':
          description: Invalid request (already upvoted or own submission)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /slang/admin/approve/{submission_id}:
    post:
      summary: Admin approve slang submission
      description: Manually approve a slang submission (admin only)
      tags:
        - Slang
        - Admin
      parameters:
        - in: path
          name: submission_id
          required: true
          schema:
            type: string
          description: The submission ID to approve
      responses:
        '200':
          description: Submission approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApprovalResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /slang/admin/reject/{submission_id}:
    post:
      summary: Admin reject slang submission
      description: Manually reject a slang submission (admin only)
      tags:
        - Slang
        - Admin
      parameters:
        - in: path
          name: submission_id
          required: true
          schema:
            type: string
          description: The submission ID to reject
      responses:
        '200':
          description: Submission rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApprovalResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/profile:
    get:
      summary: Get user profile
      description: Get the current user's profile information
      tags:
        - User
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/usage:
    get:
      summary: Get usage statistics
      description: Get the current user's usage statistics
      tags:
        - User
      responses:
        '200':
          description: Usage statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/upgrade:
    post:
      summary: Upgrade user subscription
      description: Upgrade user to premium subscription
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeRequest'
      responses:
        '200':
          description: User upgraded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpgradeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/account:
    delete:
      summary: Delete user account
      description: Permanently delete the user's account and all associated data. This action cannot be undone. Requires that the user has no active subscription - cancel subscription first in App Store/Google Play Store.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDeletionRequest'
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDeletionResponse'
        '400':
          description: Invalid request or active subscription exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_confirmation:
                  summary: Invalid confirmation text
                  value:
                    error: "Confirmation text must be exactly 'DELETE'"
                    error_code: "INVALID_CONFIRMATION"
                active_subscription:
                  summary: Active subscription exists
                  value:
                    error: "Cannot delete account with active subscription. Please cancel your subscription first in the App Store or Google Play Store, then try again."
                    error_code: "ACTIVE_SUBSCRIPTION_EXISTS"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /webhook/apple:
    post:
      summary: Apple webhook for subscription notifications
      description: Webhook endpoint for Apple App Store subscription notifications
      tags:
        - Webhooks
      security: []  # No authentication required for webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppleWebhookRequest'
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Invalid webhook payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trending:
    get:
      summary: Get trending GenZ slang terms
      description: |
        Get a list of currently trending GenZ slang terms with popularity scores and metadata.

        **Free Tier Features:**
        - Access to top 10 trending slang terms
        - Basic definitions and categories
        - Limited to 'slang' category only

        **Premium Tier Features:**
        - Access to up to 100 trending terms
        - All categories (slang, meme, expression, hashtag, phrase)
        - Detailed usage examples and origins
        - Related terms and synonyms
        - Search and translation counts
        - Advanced filtering options
      tags:
        - Trending
      parameters:
        - name: limit
          in: query
          description: |
            Number of trending terms to return.
            - Free tier: Maximum 10 terms
            - Premium tier: Maximum 100 terms
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: category
          in: query
          description: |
            Filter by trending category.
            - Free tier: Only 'slang' category allowed
            - Premium tier: All categories available
          required: false
          schema:
            type: string
            enum: [slang, meme, expression, hashtag, phrase]
        - name: active_only
          in: query
          description: Show only active trending terms
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Trending terms retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /quiz/challenge:
    get:
      summary: Get a quiz challenge
      description: |
        Generate a new quiz challenge for the authenticated user.

        **Free Tier Features:**
        - Limited to 3 quizzes per day
        - Basic difficulty levels
        - Standard question count (10 questions)

        **Premium Tier Features:**
        - Unlimited quizzes per day
        - All difficulty levels (beginner, intermediate, advanced)
        - Customizable question count (1-50 questions)
        - Multiple challenge types
      tags:
        - Quiz
      parameters:
        - name: difficulty
          in: query
          description: Quiz difficulty level
          required: false
          schema:
            type: string
            enum: [beginner, intermediate, advanced]
            default: beginner
        - name: type
          in: query
          description: Type of quiz challenge
          required: false
          schema:
            type: string
            enum: [multiple_choice]
            default: multiple_choice
        - name: count
          in: query
          description: Number of questions in the quiz (1-50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Quiz challenge generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizChallenge'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Daily quiz limit reached (free tier) or insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /quiz/submit:
    post:
      summary: Submit quiz answers
      description: |
        Submit answers for a quiz challenge and receive results.

        The challenge must be valid and not expired. Results include:
        - Score and accuracy
        - Per-question feedback
        - Explanations for each term
        - Shareable result text
      tags:
        - Quiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmissionRequest'
      responses:
        '200':
          description: Quiz submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request or expired challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /quiz/history:
    get:
      summary: Get quiz history and eligibility
      description: |
        Get the user's quiz history, statistics, and eligibility status.

        Returns:
        - Total quizzes taken
        - Average score and best score
        - Accuracy rate
        - Quizzes taken today
        - Whether user can take another quiz
        - Reason if quiz is not available
      tags:
        - Quiz
      responses:
        '200':
          description: Quiz history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizHistory'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Service status
          example: "healthy"

    TranslationRequest:
      type: object
      required:
        - text
        - direction
      properties:
        text:
          type: string
          description: Text to translate
          maxLength: 1000
          example: "Hello, how are you doing today?"
        direction:
          type: string
          description: Translation direction
          enum: ["english_to_genz", "genz_to_english"]
          example: "english_to_genz"

    TranslationResponse:
      type: object
      required:
        - translation_id
        - original_text
        - translated_text
        - direction
        - created_at
        - daily_used
        - daily_limit
        - tier
        - translation_failed
      properties:
        translation_id:
          type: string
          description: Unique translation ID
          example: "trans_123456789"
        original_text:
          type: string
          example: "Hello, how are you doing today?"
        translated_text:
          type: string
          example: "Yo, what's good fam?"
        direction:
          type: string
          description: Translation direction used
          enum: ["english_to_genz", "genz_to_english"]
          example: "english_to_genz"
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
          example: 0.95
        created_at:
          type: string
          format: date-time
          description: "Translation timestamp"
          example: "2024-12-19T10:30:00Z"
        processing_time_ms:
          type: integer
          description: Processing time in milliseconds
          example: 1250
        model_used:
          type: string
          description: AI model used for translation
          example: "anthropic.claude-3-haiku-20240307-v1:0"
        translation_failed:
          type: boolean
          description: Whether the translation failed or returned the same text
          example: false
        failure_reason:
          type: string
          description: Technical reason for translation failure
          enum: ["low_confidence", "no_translation_needed"]
          example: "low_confidence"
        user_message:
          type: string
          description: User-friendly message about the translation result
          example: "We couldn't confidently translate this text. Try rephrasing or breaking it into smaller parts."
        can_submit_feedback:
          type: boolean
          description: Whether user can submit slang feedback (premium feature, only true when translation fails)
          example: true
        daily_used:
          type: integer
          description: Total translations used today (after this translation)
          example: 5
        daily_limit:
          type: integer
          description: Daily translation limit
          example: 10
        tier:
          type: string
          description: User tier (free/premium)
          enum: ["free", "premium"]
          example: "free"

    TranslationHistory:
      type: object
      required:
        - translation_id
        - original_text
        - translated_text
        - direction
        - created_at
      properties:
        translation_id:
          type: string
          description: Unique translation ID
          example: "trans_123456789"
        user_id:
          type: string
          description: User ID
          example: "user_123456789"
        original_text:
          type: string
          example: "Hello, how are you doing today?"
        translated_text:
          type: string
          example: "Yo, what's good fam?"
        direction:
          type: string
          description: Translation direction used
          enum: ["english_to_genz", "genz_to_english"]
          example: "english_to_genz"
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
          example: 0.95
        created_at:
          type: string
          format: date-time
          description: "Translation timestamp"
          example: "2024-12-19T10:30:00Z"
        model_used:
          type: string
          description: AI model used for translation
          example: "anthropic.claude-3-haiku-20240307-v1:0"

    TranslationHistoryServiceResult:
      type: object
      required:
        - translations
        - total_count
        - has_more
      properties:
        translations:
          type: array
          items:
            $ref: '#/components/schemas/TranslationHistory'
        total_count:
          type: integer
          description: Total number of translations
          example: 150
        has_more:
          type: boolean
          description: Whether there are more translations to load
          example: true
        last_evaluated_key:
          type: object
          description: Pagination key for next request
          example: {"PK": "USER#user_123", "SK": "TRANSLATION#trans_456"}

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
          example: 150
        limit:
          type: integer
          description: Number of items per page
          example: 20
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        has_more:
          type: boolean
          description: Whether there are more items
          example: true

    UserProfileResponse:
      type: object
      required:
        - user_id
        - email
        - username
        - tier
        - status
        - created_at
        - slang_submitted_count
        - slang_approved_count
      properties:
        user_id:
          type: string
          example: "user_123456789"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          description: "Cognito username"
          example: "user123"
        tier:
          type: string
          enum: [free, premium]
          example: "free"
        status:
          type: string
          enum: [active, cancelled, suspended]
          example: "active"
        created_at:
          type: string
          format: date-time
          description: "Account creation date"
          example: "2024-12-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: "Last update date"
          example: "2024-12-19T10:30:00Z"
        slang_submitted_count:
          type: integer
          minimum: 0
          description: "Total number of slang terms submitted by user"
          example: 15
        slang_approved_count:
          type: integer
          minimum: 0
          description: "Total number of slang terms approved (auto or manual)"
          example: 8

    UsageResponse:
      type: object
      required:
        - tier
        - daily_limit
        - daily_used
        - daily_remaining
        - reset_date
        - current_max_text_length
        - free_tier_max_length
        - premium_tier_max_length
        - free_daily_limit
        - premium_daily_limit
      properties:
        tier:
          type: string
          enum: [free, premium]
          description: User tier
          example: "free"
        daily_limit:
          type: integer
          description: Daily translation limit
          example: 10
        daily_used:
          type: integer
          description: Number of translations used today
          example: 7
        daily_remaining:
          type: integer
          description: Number of translations remaining today
          example: 3
        reset_date:
          type: string
          format: date-time
          description: "Next daily reset date"
          example: "2024-12-20T00:00:00Z"
        current_max_text_length:
          type: integer
          description: Maximum text length for user's current tier
          example: 50
        free_tier_max_length:
          type: integer
          description: Free tier text length limit
          example: 50
        premium_tier_max_length:
          type: integer
          description: Premium tier text length limit
          example: 100
        free_daily_limit:
          type: integer
          description: Free tier daily translation limit
          example: 10
        premium_daily_limit:
          type: integer
          description: Premium tier daily translation limit
          example: 100

    UsageLimits:
      type: object
      properties:
        free_tier:
          type: integer
          description: Daily translations for free tier
          example: 10
        premium_tier:
          type: integer
          description: Daily translations for premium tier
          example: 100

    UpgradeRequest:
      type: object
      required:
        - platform
        - transaction_id
        - product_id
        - purchase_date
        - environment
      properties:
        platform:
          type: string
          enum: [apple, google]
          description: App store platform
          example: "apple"
        transaction_id:
          type: string
          description: Provider transaction ID
          example: "1000000123456789"
        product_id:
          type: string
          description: Product ID from the app store
          example: "com.lingible.lingible.premium.monthly"
        purchase_date:
          type: string
          format: date-time
          description: Purchase date in ISO format
          example: "2024-01-15T10:30:00Z"
        expiration_date:
          type: string
          format: date-time
          description: Expiration date in ISO format (for subscriptions)
          example: "2024-02-15T10:30:00Z"
        environment:
          type: string
          enum: [sandbox, production]
          description: App Store environment
          example: "sandbox"

    UpgradeResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User successfully upgraded to premium"
        tier:
          type: string
          enum: [premium]
          example: "premium"
        expires_at:
          type: string
          format: date-time
          description: "Subscription expiration date"
          example: "2025-01-19T10:30:00Z"

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      required:
        - success
        - message
        - error_code
        - status_code
        - timestamp
      properties:
        success:
          type: boolean
          description: Always false for error responses
          example: false
        message:
          type: string
          description: Human-readable error message
          example: "Usage limit exceeded for daily_translations. Current: 10, Limit: 10"
        error_code:
          type: string
          description: Application-specific error code
          example: "usagelimitexceedederror"
        status_code:
          type: integer
          description: HTTP status code
          example: 429
        details:
          type: object
          description: Additional error details
          example:
            limit_type: "daily_translations"
            current_usage: 10
            limit: 10
        timestamp:
          type: string
          format: date-time
          description: "Error timestamp"
          example: "2025-01-04T22:21:01.123456Z"
        request_id:
          type: string
          description: Request ID for tracing
          example: "020e424d-1d1c-4ba7-965c-5ddc8e5acb20"

    AppleWebhookRequest:
      type: object
      required:
        - notification_type
        - transaction_id
        - receipt_data
      properties:
        notification_type:
          type: string
          description: Type of Apple subscription notification
          enum:
            - INITIAL_BUY
            - CANCEL
            - RENEWAL
            - INTERACTIVE_RENEWAL
            - DID_CHANGE_RENEWAL_PREF
            - DID_CHANGE_RENEWAL_STATUS
            - PRICE_INCREASE_CONSENT
            - REFUND
            - FAILED_PAYMENT
            - REFUND_DECLINED
            - CONSUMPTION_REQUEST
          example: "INITIAL_BUY"
        transaction_id:
          type: string
          description: Apple transaction ID
          example: "1000000123456789"
        receipt_data:
          type: string
          description: Base64 encoded receipt data from Apple
          example: "ewoJInNpZ25hdHVyZSIgPSAiQWh..."
        environment:
          type: string
          description: Store environment
          enum: [sandbox, production]
          default: production
          example: "production"

    WebhookResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Webhook processed successfully"

    UserSubscriptionResponse:
      type: object
      required:
        - provider
        - transaction_id
        - status
        - start_date
        - created_at
      properties:
        provider:
          type: string
          enum: [apple, google]
          description: Subscription provider
          example: "apple"
        transaction_id:
          type: string
          description: Provider transaction ID
          example: "1000000123456789"
        status:
          type: string
          enum: [active, expired, cancelled]
          description: Subscription status
          example: "active"
        start_date:
          type: string
          format: date-time
          description: "Subscription start date"
          example: "2024-12-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          description: "Subscription end date"
          example: "2025-12-01T00:00:00Z"
        created_at:
          type: string
          format: date-time
          description: "Record creation date"
          example: "2024-12-01T00:00:00Z"


    TrendingTermResponse:
      type: object
      required:
        - term
        - translation
        - usage_count
        - last_updated
      properties:
        term:
          type: string
          description: The slang term or phrase
          example: "no cap"
        definition:
          type: string
          description: Definition or explanation of the term
          example: "No lie, for real, I'm telling the truth"
        category:
          type: string
          enum: [slang, meme, expression, hashtag, phrase]
          description: Category of the trending term
          example: "slang"
        popularity_score:
          type: number
          minimum: 0.0
          maximum: 100.0
          description: Popularity score (0-100)
          example: 85.5
        search_count:
          type: integer
          minimum: 0
          description: Number of times searched
          example: 1250
        translation_count:
          type: integer
          minimum: 0
          description: Number of times translated
          example: 890
        first_seen:
          type: string
          format: date-time
          description: "When this term was first detected"
          example: "2024-12-01T00:00:00Z"
        last_updated:
          type: string
          format: date-time
          description: "Last time metrics were updated"
          example: "2024-12-19T10:30:00Z"
        is_active:
          type: boolean
          description: Whether this term is currently trending
          example: true
        example_usage:
          type: string
          description: Example of how the term is used
          example: "That movie was fire, no cap!"
        origin:
          type: string
          description: Origin or source of the term
          example: "Hip hop culture"
        related_terms:
          type: array
          items:
            type: string
          description: Related slang terms
          example: ["fr", "for real", "deadass"]

    TrendingListResponse:
      type: object
      required:
        - trending_terms
        - last_updated
      properties:
        terms:
          type: array
          items:
            $ref: '#/components/schemas/TrendingTermResponse'
          description: List of trending terms
        total_count:
          type: integer
          description: Total number of trending terms
          example: 150
        last_updated:
          type: string
          format: date-time
          description: "When the trending data was last updated"
          example: "2024-12-19T10:30:00Z"
        category_filter:
          type: string
          enum: [slang, meme, expression, hashtag, phrase]
          description: Applied category filter
          example: "slang"

    AccountDeletionRequest:
      type: object
      required:
        - confirmation_text
      properties:
        confirmation_text:
          type: string
          description: User must type "DELETE" to confirm account deletion
          example: "DELETE"
        reason:
          type: string
          description: Optional reason for account deletion
          example: "No longer using the app"
      example:
        confirmation_text: "DELETE"
        reason: "No longer using the app"

    AccountDeletionResponse:
      type: object
      required:
        - success
        - message
        - cleanup_summary
      properties:
        success:
          type: boolean
          description: Whether the account deletion was successful
          example: true
        message:
          type: string
          description: Confirmation message
          example: "Your account and all associated data have been permanently deleted."
        deleted_at:
          type: string
          format: date-time
          description: When the account was deleted
          example: "2024-12-19T10:30:00Z"
        cleanup_summary:
          type: object
          properties:
            translations_deleted:
              type: integer
              description: Number of translation records deleted
              example: 25
            data_retention_period:
              type: string
              description: How long some data may be retained for legal/operational purposes
              example: "30 days for billing records"

    SlangSubmissionRequest:
      type: object
      required:
        - slang_term
        - meaning
      properties:
        slang_term:
          type: string
          minLength: 1
          maxLength: 100
          description: The slang term to submit
          example: "bussin"
        meaning:
          type: string
          minLength: 1
          maxLength: 500
          description: What the slang term means
          example: "Really good, amazing, excellent"
        example_usage:
          type: string
          maxLength: 500
          description: Optional example of how the term is used
          example: "This pizza is bussin, no cap!"
        context:
          type: string
          enum: ["translation_failure", "manual"]
          default: "manual"
          description: How the submission was initiated
          example: "manual"
        translation_id:
          type: string
          description: Original translation ID if submitted from a failed translation
          example: "trans_123456789"

    SlangSubmissionResponse:
      type: object
      required:
        - submission_id
        - status
        - message
        - created_at
      properties:
        submission_id:
          type: string
          description: Unique submission ID
          example: "sub_a1b2c3d4e5f6g7h8"
        status:
          type: string
          enum: ["pending", "approved", "rejected"]
          description: Current submission status
          example: "pending"
        message:
          type: string
          description: Success message
          example: "Thanks for the submission! We'll review it soon. No cap, we appreciate your help!"
        created_at:
          type: string
          format: date-time
          description: Submission timestamp
          example: "2024-12-19T10:30:00Z"

    UpvoteResponse:
      type: object
      required:
        - submission_id
        - upvotes
        - message
      properties:
        submission_id:
          type: string
          description: The upvoted submission ID
          example: "sub_a1b2c3d4e5f6g7h8"
        upvotes:
          type: integer
          minimum: 0
          description: Total upvote count after this upvote
          example: 5
        message:
          type: string
          description: Success message
          example: "Thanks for the upvote!"

    PendingSubmissionsResponse:
      type: object
      required:
        - submissions
        - total_count
        - has_more
      properties:
        submissions:
          type: array
          items:
            $ref: '#/components/schemas/SlangSubmission'
          description: List of pending slang submissions
        total_count:
          type: integer
          minimum: 0
          description: Number of submissions returned
          example: 10
        has_more:
          type: boolean
          description: Whether more submissions exist
          example: true

    AdminApprovalResponse:
      type: object
      required:
        - submission_id
        - status
        - message
      properties:
        submission_id:
          type: string
          description: The submission ID
          example: "sub_a1b2c3d4e5f6g7h8"
        status:
          type: string
          enum: ["approved", "rejected"]
          description: Updated submission status
          example: "approved"
        message:
          type: string
          description: Success message
          example: "Approved 'bussin' and added to database"

    SlangSubmission:
      type: object
      required:
        - submission_id
        - user_id
        - slang_term
        - meaning
        - context
        - status
        - created_at
        - llm_validation_status
        - upvotes
      properties:
        submission_id:
          type: string
          description: Unique submission ID
          example: "sub_a1b2c3d4e5f6g7h8"
        user_id:
          type: string
          description: User who submitted the term
          example: "user_123456789"
        slang_term:
          type: string
          description: The slang term
          example: "bussin"
        meaning:
          type: string
          description: What the term means
          example: "Really good, amazing, excellent"
        example_usage:
          type: string
          nullable: true
          description: Optional example usage
          example: "This pizza is bussin!"
        context:
          type: string
          enum: ["translation_failure", "manual"]
          description: How the submission was initiated
          example: "manual"
        original_translation_id:
          type: string
          nullable: true
          description: Translation ID if from failed translation
        status:
          type: string
          enum: ["pending", "approved", "rejected", "draft"]
          description: Overall approval status
          example: "pending"
        llm_validation_status:
          type: string
          enum: ["pending_validation", "validated", "rejected", "auto_approved", "admin_approved"]
          description: LLM validation status
          example: "validated"
        llm_confidence_score:
          type: number
          format: float
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: Confidence score from LLM validation
          example: 0.75
        approval_type:
          type: string
          enum: ["llm_auto", "admin_manual", "community_vote"]
          nullable: true
          description: Type of approval if approved
          example: "llm_auto"
        upvotes:
          type: integer
          minimum: 0
          description: Number of community upvotes
          example: 5
        created_at:
          type: string
          format: date-time
          description: Submission timestamp
          example: "2024-12-19T10:30:00Z"
        reviewed_at:
          type: string
          format: date-time
          nullable: true
          description: Review timestamp
        reviewed_by:
          type: string
          nullable: true
          description: Reviewer user ID
        approved_by:
          type: string
          nullable: true
          description: Admin who approved (if manual)

    QuizDifficulty:
      type: string
      enum: [beginner, intermediate, advanced]
      description: Quiz difficulty level
      example: beginner

    ChallengeType:
      type: string
      enum: [multiple_choice]
      description: Type of quiz challenge
      example: multiple_choice

    QuizOption:
      type: object
      required:
        - id
        - text
      properties:
        id:
          type: string
          description: Option identifier (a, b, c, d)
          example: "a"
        text:
          type: string
          description: The answer text
          example: "Really good, amazing, excellent"
        is_correct:
          type: boolean
          nullable: true
          description: Whether this option is correct (only included in results, not in challenge)

    QuizQuestion:
      type: object
      required:
        - question_id
        - slang_term
        - question_text
        - options
      properties:
        question_id:
          type: string
          description: Unique question identifier
          example: "q_a1b2c3d4e5f6"
        slang_term:
          type: string
          description: The slang term being tested
          example: "bussin"
        question_text:
          type: string
          description: The question text
          example: "What does 'bussin' mean?"
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuizOption'
          description: Available answer options
        context_hint:
          type: string
          nullable: true
          description: Example usage of the slang term
          example: "This pizza is bussin!"
        explanation:
          type: string
          nullable: true
          description: Explanation of the term (only included in results)

    QuizChallenge:
      type: object
      required:
        - challenge_id
        - challenge_type
        - difficulty
        - time_limit_seconds
        - questions
        - scoring
        - expires_at
      properties:
        challenge_id:
          type: string
          description: Unique challenge identifier
          example: "quiz_a1b2c3d4e5f6g7h8"
        challenge_type:
          $ref: '#/components/schemas/ChallengeType'
        difficulty:
          $ref: '#/components/schemas/QuizDifficulty'
        time_limit_seconds:
          type: integer
          description: Time limit for completing the quiz
          example: 60
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestion'
          description: List of quiz questions
        scoring:
          type: object
          description: Scoring configuration
          properties:
            points_per_correct:
              type: integer
              example: 10
            time_bonus:
              type: boolean
              description: Enable time bonus points
              example: true
        expires_at:
          type: string
          format: date-time
          description: When the challenge expires
          example: "2024-12-19T11:30:00Z"

    QuizAnswer:
      type: object
      required:
        - question_id
        - selected
      properties:
        question_id:
          type: string
          description: ID of the question being answered
          example: "q_a1b2c3d4e5f6"
        selected:
          type: string
          description: Selected option ID (a, b, c, d)
          example: "a"

    QuizSubmissionRequest:
      type: object
      required:
        - challenge_id
        - answers
        - time_taken_seconds
      properties:
        challenge_id:
          type: string
          description: ID of the challenge being submitted
          example: "quiz_a1b2c3d4e5f6g7h8"
        answers:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswer'
          description: User's answers
        time_taken_seconds:
          type: integer
          description: Time taken to complete the quiz
          example: 45

    QuizQuestionResult:
      type: object
      required:
        - question_id
        - slang_term
        - your_answer
        - correct_answer
        - is_correct
        - explanation
      properties:
        question_id:
          type: string
          description: Question ID
          example: "q_a1b2c3d4e5f6"
        slang_term:
          type: string
          description: The slang term
          example: "bussin"
        your_answer:
          type: string
          description: User's selected answer
          example: "a"
        correct_answer:
          type: string
          description: Correct answer option ID
          example: "a"
        is_correct:
          type: boolean
          description: Whether the user got it right
          example: true
        explanation:
          type: string
          description: Full explanation of the term
          example: "Bussin means something is really good, amazing, or excellent."

    QuizResult:
      type: object
      required:
        - challenge_id
        - score
        - total_possible
        - correct_count
        - total_questions
        - time_taken_seconds
        - time_bonus_points
        - results
        - share_text
      properties:
        challenge_id:
          type: string
          description: Challenge ID
          example: "quiz_a1b2c3d4e5f6g7h8"
        score:
          type: integer
          description: Total score achieved
          example: 95
        total_possible:
          type: integer
          description: Maximum possible score
          example: 110
        correct_count:
          type: integer
          description: Number of correct answers
          example: 9
        total_questions:
          type: integer
          description: Total number of questions
          example: 10
        time_taken_seconds:
          type: integer
          description: Time taken to complete
          example: 45
        time_bonus_points:
          type: integer
          description: Bonus points for fast completion
          example: 5
        results:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestionResult'
          description: Per-question results
        share_text:
          type: string
          description: Text for sharing results
          example: "I scored 95/110 on the Lingible Slang Quiz! I got 9/10 right (90% accuracy). Can you beat me? 🔥"
        share_url:
          type: string
          nullable: true
          description: URL for sharing results (future feature)

    QuizHistory:
      type: object
      required:
        - user_id
        - total_quizzes
        - average_score
        - best_score
        - total_correct
        - total_questions
        - accuracy_rate
        - quizzes_today
        - can_take_quiz
      properties:
        user_id:
          type: string
          description: User ID
          example: "user_123456789"
        total_quizzes:
          type: integer
          description: Total quizzes taken
          example: 25
        average_score:
          type: number
          format: float
          description: Average score across all quizzes
          example: 87.5
        best_score:
          type: integer
          description: Best score achieved
          example: 110
        total_correct:
          type: integer
          description: Total correct answers
          example: 225
        total_questions:
          type: integer
          description: Total questions answered
          example: 250
        accuracy_rate:
          type: number
          format: float
          description: Overall accuracy percentage
          example: 0.9
        quizzes_today:
          type: integer
          description: Number of quizzes taken today
          example: 2
        can_take_quiz:
          type: boolean
          description: Whether user can take another quiz
          example: true
        reason:
          type: string
          nullable: true
          description: Reason if user cannot take quiz (e.g., 'Daily limit reached')
          example: "Daily limit of 3 quizzes reached. Upgrade to Premium for unlimited quizzes!"
