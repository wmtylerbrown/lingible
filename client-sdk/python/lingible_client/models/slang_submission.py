# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SlangSubmission(BaseModel):
    """
    SlangSubmission
    """ # noqa: E501
    submission_id: StrictStr = Field(description="Unique submission ID")
    user_id: StrictStr = Field(description="User who submitted the term")
    slang_term: StrictStr = Field(description="The slang term")
    meaning: StrictStr = Field(description="What the term means")
    example_usage: Optional[StrictStr] = Field(default=None, description="Optional example usage")
    context: StrictStr = Field(description="How the submission was initiated")
    original_translation_id: Optional[StrictStr] = Field(default=None, description="Translation ID if from failed translation")
    status: StrictStr = Field(description="Overall approval status")
    llm_validation_status: StrictStr = Field(description="LLM validation status")
    llm_confidence_score: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="Confidence score from LLM validation")
    approval_type: Optional[StrictStr] = Field(default=None, description="Type of approval if approved")
    upvotes: Annotated[int, Field(strict=True, ge=0)] = Field(description="Number of community upvotes")
    created_at: datetime = Field(description="Submission timestamp")
    reviewed_at: Optional[datetime] = Field(default=None, description="Review timestamp")
    reviewed_by: Optional[StrictStr] = Field(default=None, description="Reviewer user ID")
    approved_by: Optional[StrictStr] = Field(default=None, description="Admin who approved (if manual)")
    __properties: ClassVar[List[str]] = ["submission_id", "user_id", "slang_term", "meaning", "example_usage", "context", "original_translation_id", "status", "llm_validation_status", "llm_confidence_score", "approval_type", "upvotes", "created_at", "reviewed_at", "reviewed_by", "approved_by"]

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['translation_failure', 'manual']):
            raise ValueError("must be one of enum values ('translation_failure', 'manual')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'approved', 'rejected', 'draft']):
            raise ValueError("must be one of enum values ('pending', 'approved', 'rejected', 'draft')")
        return value

    @field_validator('llm_validation_status')
    def llm_validation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending_validation', 'validated', 'rejected', 'auto_approved', 'admin_approved']):
            raise ValueError("must be one of enum values ('pending_validation', 'validated', 'rejected', 'auto_approved', 'admin_approved')")
        return value

    @field_validator('approval_type')
    def approval_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['llm_auto', 'admin_manual', 'community_vote']):
            raise ValueError("must be one of enum values ('llm_auto', 'admin_manual', 'community_vote')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlangSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if example_usage (nullable) is None
        # and model_fields_set contains the field
        if self.example_usage is None and "example_usage" in self.model_fields_set:
            _dict['example_usage'] = None

        # set to None if original_translation_id (nullable) is None
        # and model_fields_set contains the field
        if self.original_translation_id is None and "original_translation_id" in self.model_fields_set:
            _dict['original_translation_id'] = None

        # set to None if llm_confidence_score (nullable) is None
        # and model_fields_set contains the field
        if self.llm_confidence_score is None and "llm_confidence_score" in self.model_fields_set:
            _dict['llm_confidence_score'] = None

        # set to None if approval_type (nullable) is None
        # and model_fields_set contains the field
        if self.approval_type is None and "approval_type" in self.model_fields_set:
            _dict['approval_type'] = None

        # set to None if reviewed_at (nullable) is None
        # and model_fields_set contains the field
        if self.reviewed_at is None and "reviewed_at" in self.model_fields_set:
            _dict['reviewed_at'] = None

        # set to None if reviewed_by (nullable) is None
        # and model_fields_set contains the field
        if self.reviewed_by is None and "reviewed_by" in self.model_fields_set:
            _dict['reviewed_by'] = None

        # set to None if approved_by (nullable) is None
        # and model_fields_set contains the field
        if self.approved_by is None and "approved_by" in self.model_fields_set:
            _dict['approved_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlangSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "submission_id": obj.get("submission_id"),
            "user_id": obj.get("user_id"),
            "slang_term": obj.get("slang_term"),
            "meaning": obj.get("meaning"),
            "example_usage": obj.get("example_usage"),
            "context": obj.get("context"),
            "original_translation_id": obj.get("original_translation_id"),
            "status": obj.get("status"),
            "llm_validation_status": obj.get("llm_validation_status"),
            "llm_confidence_score": obj.get("llm_confidence_score"),
            "approval_type": obj.get("approval_type"),
            "upvotes": obj.get("upvotes"),
            "created_at": obj.get("created_at"),
            "reviewed_at": obj.get("reviewed_at"),
            "reviewed_by": obj.get("reviewed_by"),
            "approved_by": obj.get("approved_by")
        })
        return _obj
