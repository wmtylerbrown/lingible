# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppleWebhookRequest(BaseModel):
    """
    AppleWebhookRequest
    """ # noqa: E501
    notification_type: StrictStr = Field(description="Type of Apple subscription notification")
    transaction_id: StrictStr = Field(description="Apple transaction ID")
    receipt_data: StrictStr = Field(description="Base64 encoded receipt data from Apple")
    environment: Optional[StrictStr] = Field(default='production', description="Store environment")
    __properties: ClassVar[List[str]] = ["notification_type", "transaction_id", "receipt_data", "environment"]

    @field_validator('notification_type')
    def notification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['INITIAL_BUY', 'CANCEL', 'RENEWAL', 'INTERACTIVE_RENEWAL', 'DID_CHANGE_RENEWAL_PREF', 'DID_CHANGE_RENEWAL_STATUS', 'PRICE_INCREASE_CONSENT', 'REFUND', 'FAILED_PAYMENT', 'REFUND_DECLINED', 'CONSUMPTION_REQUEST']):
            raise ValueError("must be one of enum values ('INITIAL_BUY', 'CANCEL', 'RENEWAL', 'INTERACTIVE_RENEWAL', 'DID_CHANGE_RENEWAL_PREF', 'DID_CHANGE_RENEWAL_STATUS', 'PRICE_INCREASE_CONSENT', 'REFUND', 'FAILED_PAYMENT', 'REFUND_DECLINED', 'CONSUMPTION_REQUEST')")
        return value

    @field_validator('environment')
    def environment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['sandbox', 'production']):
            raise ValueError("must be one of enum values ('sandbox', 'production')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppleWebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppleWebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "notification_type": obj.get("notification_type"),
            "transaction_id": obj.get("transaction_id"),
            "receipt_data": obj.get("receipt_data"),
            "environment": obj.get("environment") if obj.get("environment") is not None else 'production'
        })
        return _obj


