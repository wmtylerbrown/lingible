# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QuizHistory(BaseModel):
    """
    QuizHistory
    """ # noqa: E501
    user_id: StrictStr = Field(description="User ID")
    total_quizzes: StrictInt = Field(description="Total quizzes taken")
    average_score: Union[StrictFloat, StrictInt] = Field(description="Average score across all quizzes")
    best_score: StrictInt = Field(description="Best score achieved")
    total_correct: StrictInt = Field(description="Total correct answers")
    total_questions: StrictInt = Field(description="Total questions answered")
    accuracy_rate: Union[StrictFloat, StrictInt] = Field(description="Overall accuracy percentage")
    quizzes_today: StrictInt = Field(description="Number of quizzes taken today")
    can_take_quiz: StrictBool = Field(description="Whether user can take another quiz")
    reason: Optional[StrictStr] = Field(default=None, description="Reason if user cannot take quiz (e.g., 'Daily limit reached')")
    __properties: ClassVar[List[str]] = ["user_id", "total_quizzes", "average_score", "best_score", "total_correct", "total_questions", "accuracy_rate", "quizzes_today", "can_take_quiz", "reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuizHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuizHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "total_quizzes": obj.get("total_quizzes"),
            "average_score": obj.get("average_score"),
            "best_score": obj.get("best_score"),
            "total_correct": obj.get("total_correct"),
            "total_questions": obj.get("total_questions"),
            "accuracy_rate": obj.get("accuracy_rate"),
            "quizzes_today": obj.get("quizzes_today"),
            "can_take_quiz": obj.get("can_take_quiz"),
            "reason": obj.get("reason")
        })
        return _obj
