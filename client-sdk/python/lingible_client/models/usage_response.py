# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UsageResponse(BaseModel):
    """
    UsageResponse
    """ # noqa: E501
    tier: Optional[StrictStr] = Field(default=None, description="User tier")
    daily_limit: Optional[StrictInt] = Field(default=None, description="Daily translation limit")
    daily_used: Optional[StrictInt] = Field(default=None, description="Number of translations used today")
    daily_remaining: Optional[StrictInt] = Field(default=None, description="Number of translations remaining today")
    reset_date: Optional[datetime] = Field(default=None, description="Next daily reset date")
    current_max_text_length: Optional[StrictInt] = Field(default=None, description="Maximum text length for user's current tier")
    free_tier_max_length: Optional[StrictInt] = Field(default=None, description="Free tier text length limit")
    premium_tier_max_length: Optional[StrictInt] = Field(default=None, description="Premium tier text length limit")
    free_daily_limit: Optional[StrictInt] = Field(default=None, description="Free tier daily translation limit")
    premium_daily_limit: Optional[StrictInt] = Field(default=None, description="Premium tier daily translation limit")
    __properties: ClassVar[List[str]] = ["tier", "daily_limit", "daily_used", "daily_remaining", "reset_date", "current_max_text_length", "free_tier_max_length", "premium_tier_max_length", "free_daily_limit", "premium_daily_limit"]

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['free', 'premium']):
            raise ValueError("must be one of enum values ('free', 'premium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tier": obj.get("tier"),
            "daily_limit": obj.get("daily_limit"),
            "daily_used": obj.get("daily_used"),
            "daily_remaining": obj.get("daily_remaining"),
            "reset_date": obj.get("reset_date"),
            "current_max_text_length": obj.get("current_max_text_length"),
            "free_tier_max_length": obj.get("free_tier_max_length"),
            "premium_tier_max_length": obj.get("premium_tier_max_length"),
            "free_daily_limit": obj.get("free_daily_limit"),
            "premium_daily_limit": obj.get("premium_daily_limit")
        })
        return _obj


