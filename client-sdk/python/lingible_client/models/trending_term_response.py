# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TrendingTermResponse(BaseModel):
    """
    TrendingTermResponse
    """ # noqa: E501
    term: Optional[StrictStr] = Field(default=None, description="The slang term or phrase")
    definition: Optional[StrictStr] = Field(default=None, description="Definition or explanation of the term")
    category: Optional[StrictStr] = Field(default=None, description="Category of the trending term")
    popularity_score: Optional[Union[Annotated[float, Field(le=100.0, strict=True, ge=0.0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Popularity score (0-100)")
    search_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of times searched")
    translation_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of times translated")
    first_seen: Optional[datetime] = Field(default=None, description="When this term was first detected")
    last_updated: Optional[datetime] = Field(default=None, description="Last time metrics were updated")
    is_active: Optional[StrictBool] = Field(default=None, description="Whether this term is currently trending")
    example_usage: Optional[StrictStr] = Field(default=None, description="Example of how the term is used")
    origin: Optional[StrictStr] = Field(default=None, description="Origin or source of the term")
    related_terms: Optional[List[StrictStr]] = Field(default=None, description="Related slang terms")
    __properties: ClassVar[List[str]] = ["term", "definition", "category", "popularity_score", "search_count", "translation_count", "first_seen", "last_updated", "is_active", "example_usage", "origin", "related_terms"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['slang', 'meme', 'expression', 'hashtag', 'phrase']):
            raise ValueError("must be one of enum values ('slang', 'meme', 'expression', 'hashtag', 'phrase')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrendingTermResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrendingTermResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "term": obj.get("term"),
            "definition": obj.get("definition"),
            "category": obj.get("category"),
            "popularity_score": obj.get("popularity_score"),
            "search_count": obj.get("search_count"),
            "translation_count": obj.get("translation_count"),
            "first_seen": obj.get("first_seen"),
            "last_updated": obj.get("last_updated"),
            "is_active": obj.get("is_active"),
            "example_usage": obj.get("example_usage"),
            "origin": obj.get("origin"),
            "related_terms": obj.get("related_terms")
        })
        return _obj
