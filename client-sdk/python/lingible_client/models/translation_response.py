# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TranslationResponse(BaseModel):
    """
    TranslationResponse
    """ # noqa: E501
    translation_id: StrictStr = Field(description="Unique translation ID")
    original_text: StrictStr
    translated_text: StrictStr
    direction: StrictStr = Field(description="Translation direction used")
    confidence_score: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = None
    created_at: datetime = Field(description="Translation timestamp")
    processing_time_ms: Optional[StrictInt] = Field(default=None, description="Processing time in milliseconds")
    model_used: Optional[StrictStr] = Field(default=None, description="AI model used for translation")
    translation_failed: StrictBool = Field(description="Whether the translation failed or returned the same text")
    failure_reason: Optional[StrictStr] = Field(default=None, description="Technical reason for translation failure")
    user_message: Optional[StrictStr] = Field(default=None, description="User-friendly message about the translation result")
    can_submit_feedback: Optional[StrictBool] = Field(default=None, description="Whether user can submit slang feedback (premium feature, only true when translation fails)")
    daily_used: StrictInt = Field(description="Total translations used today (after this translation)")
    daily_limit: StrictInt = Field(description="Daily translation limit")
    tier: StrictStr = Field(description="User tier (free/premium)")
    __properties: ClassVar[List[str]] = ["translation_id", "original_text", "translated_text", "direction", "confidence_score", "created_at", "processing_time_ms", "model_used", "translation_failed", "failure_reason", "user_message", "can_submit_feedback", "daily_used", "daily_limit", "tier"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['english_to_genz', 'genz_to_english']):
            raise ValueError("must be one of enum values ('english_to_genz', 'genz_to_english')")
        return value

    @field_validator('failure_reason')
    def failure_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['low_confidence', 'no_translation_needed']):
            raise ValueError("must be one of enum values ('low_confidence', 'no_translation_needed')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['free', 'premium']):
            raise ValueError("must be one of enum values ('free', 'premium')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "translation_id": obj.get("translation_id"),
            "original_text": obj.get("original_text"),
            "translated_text": obj.get("translated_text"),
            "direction": obj.get("direction"),
            "confidence_score": obj.get("confidence_score"),
            "created_at": obj.get("created_at"),
            "processing_time_ms": obj.get("processing_time_ms"),
            "model_used": obj.get("model_used"),
            "translation_failed": obj.get("translation_failed"),
            "failure_reason": obj.get("failure_reason"),
            "user_message": obj.get("user_message"),
            "can_submit_feedback": obj.get("can_submit_feedback"),
            "daily_used": obj.get("daily_used"),
            "daily_limit": obj.get("daily_limit"),
            "tier": obj.get("tier")
        })
        return _obj
