# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UserProfileResponse(BaseModel):
    """
    UserProfileResponse
    """ # noqa: E501
    user_id: StrictStr
    email: StrictStr
    username: StrictStr = Field(description="Cognito username")
    tier: StrictStr
    status: StrictStr
    created_at: datetime = Field(description="Account creation date")
    updated_at: Optional[datetime] = Field(default=None, description="Last update date")
    slang_submitted_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of slang terms submitted by user")
    slang_approved_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Total number of slang terms approved (auto or manual)")
    __properties: ClassVar[List[str]] = ["user_id", "email", "username", "tier", "status", "created_at", "updated_at", "slang_submitted_count", "slang_approved_count"]

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['free', 'premium']):
            raise ValueError("must be one of enum values ('free', 'premium')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'cancelled', 'suspended']):
            raise ValueError("must be one of enum values ('active', 'cancelled', 'suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "tier": obj.get("tier"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "slang_submitted_count": obj.get("slang_submitted_count"),
            "slang_approved_count": obj.get("slang_approved_count")
        })
        return _obj
