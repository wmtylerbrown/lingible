# coding: utf-8

"""
    Lingible API

    API for translating GenZ/teen slang to English and vice versa using AWS Bedrock

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SlangSubmissionRequest(BaseModel):
    """
    SlangSubmissionRequest
    """ # noqa: E501
    slang_term: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="The slang term to submit")
    meaning: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(description="What the slang term means")
    example_usage: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Optional example of how the term is used")
    context: Optional[StrictStr] = Field(default='manual', description="How the submission was initiated")
    translation_id: Optional[StrictStr] = Field(default=None, description="Original translation ID if submitted from a failed translation")
    __properties: ClassVar[List[str]] = ["slang_term", "meaning", "example_usage", "context", "translation_id"]

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['translation_failure', 'manual']):
            raise ValueError("must be one of enum values ('translation_failure', 'manual')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlangSubmissionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlangSubmissionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "slang_term": obj.get("slang_term"),
            "meaning": obj.get("meaning"),
            "example_usage": obj.get("example_usage"),
            "context": obj.get("context") if obj.get("context") is not None else 'manual',
            "translation_id": obj.get("translation_id")
        })
        return _obj
